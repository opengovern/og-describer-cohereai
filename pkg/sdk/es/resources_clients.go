// Code is generated by go generate. DO NOT EDIT.
package opengovernance

import (
	"context"
	cohereai "github.com/opengovern/og-describer-cohereai/provider/model"
	essdk "github.com/opengovern/og-util/pkg/opengovernance-es-sdk"
	steampipesdk "github.com/opengovern/og-util/pkg/steampipe"
	"github.com/turbot/steampipe-plugin-sdk/v5/plugin"
	"runtime"
)

type Client struct {
	essdk.Client
}

// ==========================  START: Connector =============================

type Connector struct {
	ResourceID      string                        `json:"resource_id"`
	PlatformID      string                        `json:"platform_id"`
	Description     cohereai.ConnectorDescription `json:"Description"`
	Metadata        cohereai.Metadata             `json:"metadata"`
	DescribedBy     string                        `json:"described_by"`
	ResourceType    string                        `json:"resource_type"`
	IntegrationType string                        `json:"integration_type"`
	IntegrationID   string                        `json:"integration_id"`
}

type ConnectorHit struct {
	ID      string        `json:"_id"`
	Score   float64       `json:"_score"`
	Index   string        `json:"_index"`
	Type    string        `json:"_type"`
	Version int64         `json:"_version,omitempty"`
	Source  Connector     `json:"_source"`
	Sort    []interface{} `json:"sort"`
}

type ConnectorHits struct {
	Total essdk.SearchTotal `json:"total"`
	Hits  []ConnectorHit    `json:"hits"`
}

type ConnectorSearchResponse struct {
	PitID string        `json:"pit_id"`
	Hits  ConnectorHits `json:"hits"`
}

type ConnectorPaginator struct {
	paginator *essdk.BaseESPaginator
}

func (k Client) NewConnectorPaginator(filters []essdk.BoolFilter, limit *int64) (ConnectorPaginator, error) {
	paginator, err := essdk.NewPaginator(k.ES(), "cohereai_connectors", filters, limit)
	if err != nil {
		return ConnectorPaginator{}, err
	}

	p := ConnectorPaginator{
		paginator: paginator,
	}

	return p, nil
}

func (p ConnectorPaginator) HasNext() bool {
	return !p.paginator.Done()
}

func (p ConnectorPaginator) Close(ctx context.Context) error {
	return p.paginator.Deallocate(ctx)
}

func (p ConnectorPaginator) NextPage(ctx context.Context) ([]Connector, error) {
	var response ConnectorSearchResponse
	err := p.paginator.Search(ctx, &response)
	if err != nil {
		return nil, err
	}

	var values []Connector
	for _, hit := range response.Hits.Hits {
		values = append(values, hit.Source)
	}

	hits := int64(len(response.Hits.Hits))
	if hits > 0 {
		p.paginator.UpdateState(hits, response.Hits.Hits[hits-1].Sort, response.PitID)
	} else {
		p.paginator.UpdateState(hits, nil, "")
	}

	return values, nil
}

var listConnectorFilters = map[string]string{
	"description":     "Description.Description",
	"excludes":        "Description.Excludes",
	"id":              "Description.ID",
	"name":            "Description.Name",
	"organization_id": "Description.OrganizationId",
	"url":             "Description.Url",
}

func ListConnector(ctx context.Context, d *plugin.QueryData, _ *plugin.HydrateData) (interface{}, error) {
	plugin.Logger(ctx).Trace("ListConnector")
	runtime.GC()

	// create service
	cfg := essdk.GetConfig(d.Connection)
	ke, err := essdk.NewClientCached(cfg, d.ConnectionCache, ctx)
	if err != nil {
		plugin.Logger(ctx).Error("ListConnector NewClientCached", "error", err)
		return nil, err
	}
	k := Client{Client: ke}

	sc, err := steampipesdk.NewSelfClientCached(ctx, d.ConnectionCache)
	if err != nil {
		plugin.Logger(ctx).Error("ListConnector NewSelfClientCached", "error", err)
		return nil, err
	}
	integrationId, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyIntegrationID)
	if err != nil {
		plugin.Logger(ctx).Error("ListConnector GetConfigTableValueOrNil for OpenGovernanceConfigKeyIntegrationID", "error", err)
		return nil, err
	}
	encodedResourceCollectionFilters, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyResourceCollectionFilters)
	if err != nil {
		plugin.Logger(ctx).Error("ListConnector GetConfigTableValueOrNil for OpenGovernanceConfigKeyResourceCollectionFilters", "error", err)
		return nil, err
	}
	clientType, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyClientType)
	if err != nil {
		plugin.Logger(ctx).Error("ListConnector GetConfigTableValueOrNil for OpenGovernanceConfigKeyClientType", "error", err)
		return nil, err
	}

	paginator, err := k.NewConnectorPaginator(essdk.BuildFilter(ctx, d.QueryContext, listConnectorFilters, integrationId, encodedResourceCollectionFilters, clientType), d.QueryContext.Limit)
	if err != nil {
		plugin.Logger(ctx).Error("ListConnector NewConnectorPaginator", "error", err)
		return nil, err
	}

	for paginator.HasNext() {
		page, err := paginator.NextPage(ctx)
		if err != nil {
			plugin.Logger(ctx).Error("ListConnector paginator.NextPage", "error", err)
			return nil, err
		}

		for _, v := range page {
			d.StreamListItem(ctx, v)
		}
	}

	err = paginator.Close(ctx)
	if err != nil {
		return nil, err
	}

	return nil, nil
}

var getConnectorFilters = map[string]string{
	"description":     "Description.Description",
	"excludes":        "Description.Excludes",
	"id":              "Description.ID",
	"name":            "Description.Name",
	"organization_id": "Description.OrganizationId",
	"url":             "Description.Url",
}

func GetConnector(ctx context.Context, d *plugin.QueryData, _ *plugin.HydrateData) (interface{}, error) {
	plugin.Logger(ctx).Trace("GetConnector")
	runtime.GC()
	// create service
	cfg := essdk.GetConfig(d.Connection)
	ke, err := essdk.NewClientCached(cfg, d.ConnectionCache, ctx)
	if err != nil {
		return nil, err
	}
	k := Client{Client: ke}

	sc, err := steampipesdk.NewSelfClientCached(ctx, d.ConnectionCache)
	if err != nil {
		return nil, err
	}
	integrationId, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyIntegrationID)
	if err != nil {
		return nil, err
	}
	encodedResourceCollectionFilters, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyResourceCollectionFilters)
	if err != nil {
		return nil, err
	}
	clientType, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyClientType)
	if err != nil {
		return nil, err
	}

	limit := int64(1)
	paginator, err := k.NewConnectorPaginator(essdk.BuildFilter(ctx, d.QueryContext, getConnectorFilters, integrationId, encodedResourceCollectionFilters, clientType), &limit)
	if err != nil {
		return nil, err
	}

	for paginator.HasNext() {
		page, err := paginator.NextPage(ctx)
		if err != nil {
			return nil, err
		}

		for _, v := range page {
			return v, nil
		}
	}

	err = paginator.Close(ctx)
	if err != nil {
		return nil, err
	}

	return nil, nil
}

// ==========================  END: Connector =============================

// ==========================  START: Model =============================

type Model struct {
	ResourceID      string                    `json:"resource_id"`
	PlatformID      string                    `json:"platform_id"`
	Description     cohereai.ModelDescription `json:"Description"`
	Metadata        cohereai.Metadata         `json:"metadata"`
	DescribedBy     string                    `json:"described_by"`
	ResourceType    string                    `json:"resource_type"`
	IntegrationType string                    `json:"integration_type"`
	IntegrationID   string                    `json:"integration_id"`
}

type ModelHit struct {
	ID      string        `json:"_id"`
	Score   float64       `json:"_score"`
	Index   string        `json:"_index"`
	Type    string        `json:"_type"`
	Version int64         `json:"_version,omitempty"`
	Source  Model         `json:"_source"`
	Sort    []interface{} `json:"sort"`
}

type ModelHits struct {
	Total essdk.SearchTotal `json:"total"`
	Hits  []ModelHit        `json:"hits"`
}

type ModelSearchResponse struct {
	PitID string    `json:"pit_id"`
	Hits  ModelHits `json:"hits"`
}

type ModelPaginator struct {
	paginator *essdk.BaseESPaginator
}

func (k Client) NewModelPaginator(filters []essdk.BoolFilter, limit *int64) (ModelPaginator, error) {
	paginator, err := essdk.NewPaginator(k.ES(), "cohereai_models", filters, limit)
	if err != nil {
		return ModelPaginator{}, err
	}

	p := ModelPaginator{
		paginator: paginator,
	}

	return p, nil
}

func (p ModelPaginator) HasNext() bool {
	return !p.paginator.Done()
}

func (p ModelPaginator) Close(ctx context.Context) error {
	return p.paginator.Deallocate(ctx)
}

func (p ModelPaginator) NextPage(ctx context.Context) ([]Model, error) {
	var response ModelSearchResponse
	err := p.paginator.Search(ctx, &response)
	if err != nil {
		return nil, err
	}

	var values []Model
	for _, hit := range response.Hits.Hits {
		values = append(values, hit.Source)
	}

	hits := int64(len(response.Hits.Hits))
	if hits > 0 {
		p.paginator.UpdateState(hits, response.Hits.Hits[hits-1].Sort, response.PitID)
	} else {
		p.paginator.UpdateState(hits, nil, "")
	}

	return values, nil
}

var listModelFilters = map[string]string{
	"default_endpoints": "Description.DefaultEndpoints",
	"endpoints":         "Description.Endpoints",
	"name":              "Description.Name",
	"tokenizer_url":     "Description.TokenizerUrl",
}

func ListModel(ctx context.Context, d *plugin.QueryData, _ *plugin.HydrateData) (interface{}, error) {
	plugin.Logger(ctx).Trace("ListModel")
	runtime.GC()

	// create service
	cfg := essdk.GetConfig(d.Connection)
	ke, err := essdk.NewClientCached(cfg, d.ConnectionCache, ctx)
	if err != nil {
		plugin.Logger(ctx).Error("ListModel NewClientCached", "error", err)
		return nil, err
	}
	k := Client{Client: ke}

	sc, err := steampipesdk.NewSelfClientCached(ctx, d.ConnectionCache)
	if err != nil {
		plugin.Logger(ctx).Error("ListModel NewSelfClientCached", "error", err)
		return nil, err
	}
	integrationId, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyIntegrationID)
	if err != nil {
		plugin.Logger(ctx).Error("ListModel GetConfigTableValueOrNil for OpenGovernanceConfigKeyIntegrationID", "error", err)
		return nil, err
	}
	encodedResourceCollectionFilters, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyResourceCollectionFilters)
	if err != nil {
		plugin.Logger(ctx).Error("ListModel GetConfigTableValueOrNil for OpenGovernanceConfigKeyResourceCollectionFilters", "error", err)
		return nil, err
	}
	clientType, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyClientType)
	if err != nil {
		plugin.Logger(ctx).Error("ListModel GetConfigTableValueOrNil for OpenGovernanceConfigKeyClientType", "error", err)
		return nil, err
	}

	paginator, err := k.NewModelPaginator(essdk.BuildFilter(ctx, d.QueryContext, listModelFilters, integrationId, encodedResourceCollectionFilters, clientType), d.QueryContext.Limit)
	if err != nil {
		plugin.Logger(ctx).Error("ListModel NewModelPaginator", "error", err)
		return nil, err
	}

	for paginator.HasNext() {
		page, err := paginator.NextPage(ctx)
		if err != nil {
			plugin.Logger(ctx).Error("ListModel paginator.NextPage", "error", err)
			return nil, err
		}

		for _, v := range page {
			d.StreamListItem(ctx, v)
		}
	}

	err = paginator.Close(ctx)
	if err != nil {
		return nil, err
	}

	return nil, nil
}

var getModelFilters = map[string]string{
	"default_endpoints": "Description.DefaultEndpoints",
	"endpoints":         "Description.Endpoints",
	"name":              "Description.Name",
	"tokenizer_url":     "Description.TokenizerUrl",
}

func GetModel(ctx context.Context, d *plugin.QueryData, _ *plugin.HydrateData) (interface{}, error) {
	plugin.Logger(ctx).Trace("GetModel")
	runtime.GC()
	// create service
	cfg := essdk.GetConfig(d.Connection)
	ke, err := essdk.NewClientCached(cfg, d.ConnectionCache, ctx)
	if err != nil {
		return nil, err
	}
	k := Client{Client: ke}

	sc, err := steampipesdk.NewSelfClientCached(ctx, d.ConnectionCache)
	if err != nil {
		return nil, err
	}
	integrationId, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyIntegrationID)
	if err != nil {
		return nil, err
	}
	encodedResourceCollectionFilters, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyResourceCollectionFilters)
	if err != nil {
		return nil, err
	}
	clientType, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyClientType)
	if err != nil {
		return nil, err
	}

	limit := int64(1)
	paginator, err := k.NewModelPaginator(essdk.BuildFilter(ctx, d.QueryContext, getModelFilters, integrationId, encodedResourceCollectionFilters, clientType), &limit)
	if err != nil {
		return nil, err
	}

	for paginator.HasNext() {
		page, err := paginator.NextPage(ctx)
		if err != nil {
			return nil, err
		}

		for _, v := range page {
			return v, nil
		}
	}

	err = paginator.Close(ctx)
	if err != nil {
		return nil, err
	}

	return nil, nil
}

// ==========================  END: Model =============================

// ==========================  START: Dataset =============================

type Dataset struct {
	ResourceID      string                      `json:"resource_id"`
	PlatformID      string                      `json:"platform_id"`
	Description     cohereai.DatasetDescription `json:"Description"`
	Metadata        cohereai.Metadata           `json:"metadata"`
	DescribedBy     string                      `json:"described_by"`
	ResourceType    string                      `json:"resource_type"`
	IntegrationType string                      `json:"integration_type"`
	IntegrationID   string                      `json:"integration_id"`
}

type DatasetHit struct {
	ID      string        `json:"_id"`
	Score   float64       `json:"_score"`
	Index   string        `json:"_index"`
	Type    string        `json:"_type"`
	Version int64         `json:"_version,omitempty"`
	Source  Dataset       `json:"_source"`
	Sort    []interface{} `json:"sort"`
}

type DatasetHits struct {
	Total essdk.SearchTotal `json:"total"`
	Hits  []DatasetHit      `json:"hits"`
}

type DatasetSearchResponse struct {
	PitID string      `json:"pit_id"`
	Hits  DatasetHits `json:"hits"`
}

type DatasetPaginator struct {
	paginator *essdk.BaseESPaginator
}

func (k Client) NewDatasetPaginator(filters []essdk.BoolFilter, limit *int64) (DatasetPaginator, error) {
	paginator, err := essdk.NewPaginator(k.ES(), "cohereai_datasets", filters, limit)
	if err != nil {
		return DatasetPaginator{}, err
	}

	p := DatasetPaginator{
		paginator: paginator,
	}

	return p, nil
}

func (p DatasetPaginator) HasNext() bool {
	return !p.paginator.Done()
}

func (p DatasetPaginator) Close(ctx context.Context) error {
	return p.paginator.Deallocate(ctx)
}

func (p DatasetPaginator) NextPage(ctx context.Context) ([]Dataset, error) {
	var response DatasetSearchResponse
	err := p.paginator.Search(ctx, &response)
	if err != nil {
		return nil, err
	}

	var values []Dataset
	for _, hit := range response.Hits.Hits {
		values = append(values, hit.Source)
	}

	hits := int64(len(response.Hits.Hits))
	if hits > 0 {
		p.paginator.UpdateState(hits, response.Hits.Hits[hits-1].Sort, response.PitID)
	} else {
		p.paginator.UpdateState(hits, nil, "")
	}

	return values, nil
}

var listDatasetFilters = map[string]string{
	"dataset_parts":     "Description.DatasetParts",
	"dataset_type":      "Description.DatasetType",
	"id":                "Description.ID",
	"name":              "Description.Name",
	"parse_info":        "Description.ParseInfo",
	"preserve_fields":   "Description.PreserveFields",
	"required_fields":   "Description.RequiredFields",
	"schema":            "Description.Schema",
	"validation_status": "Description.ValidationStatus",
}

func ListDataset(ctx context.Context, d *plugin.QueryData, _ *plugin.HydrateData) (interface{}, error) {
	plugin.Logger(ctx).Trace("ListDataset")
	runtime.GC()

	// create service
	cfg := essdk.GetConfig(d.Connection)
	ke, err := essdk.NewClientCached(cfg, d.ConnectionCache, ctx)
	if err != nil {
		plugin.Logger(ctx).Error("ListDataset NewClientCached", "error", err)
		return nil, err
	}
	k := Client{Client: ke}

	sc, err := steampipesdk.NewSelfClientCached(ctx, d.ConnectionCache)
	if err != nil {
		plugin.Logger(ctx).Error("ListDataset NewSelfClientCached", "error", err)
		return nil, err
	}
	integrationId, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyIntegrationID)
	if err != nil {
		plugin.Logger(ctx).Error("ListDataset GetConfigTableValueOrNil for OpenGovernanceConfigKeyIntegrationID", "error", err)
		return nil, err
	}
	encodedResourceCollectionFilters, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyResourceCollectionFilters)
	if err != nil {
		plugin.Logger(ctx).Error("ListDataset GetConfigTableValueOrNil for OpenGovernanceConfigKeyResourceCollectionFilters", "error", err)
		return nil, err
	}
	clientType, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyClientType)
	if err != nil {
		plugin.Logger(ctx).Error("ListDataset GetConfigTableValueOrNil for OpenGovernanceConfigKeyClientType", "error", err)
		return nil, err
	}

	paginator, err := k.NewDatasetPaginator(essdk.BuildFilter(ctx, d.QueryContext, listDatasetFilters, integrationId, encodedResourceCollectionFilters, clientType), d.QueryContext.Limit)
	if err != nil {
		plugin.Logger(ctx).Error("ListDataset NewDatasetPaginator", "error", err)
		return nil, err
	}

	for paginator.HasNext() {
		page, err := paginator.NextPage(ctx)
		if err != nil {
			plugin.Logger(ctx).Error("ListDataset paginator.NextPage", "error", err)
			return nil, err
		}

		for _, v := range page {
			d.StreamListItem(ctx, v)
		}
	}

	err = paginator.Close(ctx)
	if err != nil {
		return nil, err
	}

	return nil, nil
}

var getDatasetFilters = map[string]string{
	"dataset_parts":     "Description.DatasetParts",
	"dataset_type":      "Description.DatasetType",
	"id":                "Description.ID",
	"name":              "Description.Name",
	"parse_info":        "Description.ParseInfo",
	"preserve_fields":   "Description.PreserveFields",
	"required_fields":   "Description.RequiredFields",
	"schema":            "Description.Schema",
	"validation_status": "Description.ValidationStatus",
}

func GetDataset(ctx context.Context, d *plugin.QueryData, _ *plugin.HydrateData) (interface{}, error) {
	plugin.Logger(ctx).Trace("GetDataset")
	runtime.GC()
	// create service
	cfg := essdk.GetConfig(d.Connection)
	ke, err := essdk.NewClientCached(cfg, d.ConnectionCache, ctx)
	if err != nil {
		return nil, err
	}
	k := Client{Client: ke}

	sc, err := steampipesdk.NewSelfClientCached(ctx, d.ConnectionCache)
	if err != nil {
		return nil, err
	}
	integrationId, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyIntegrationID)
	if err != nil {
		return nil, err
	}
	encodedResourceCollectionFilters, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyResourceCollectionFilters)
	if err != nil {
		return nil, err
	}
	clientType, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyClientType)
	if err != nil {
		return nil, err
	}

	limit := int64(1)
	paginator, err := k.NewDatasetPaginator(essdk.BuildFilter(ctx, d.QueryContext, getDatasetFilters, integrationId, encodedResourceCollectionFilters, clientType), &limit)
	if err != nil {
		return nil, err
	}

	for paginator.HasNext() {
		page, err := paginator.NextPage(ctx)
		if err != nil {
			return nil, err
		}

		for _, v := range page {
			return v, nil
		}
	}

	err = paginator.Close(ctx)
	if err != nil {
		return nil, err
	}

	return nil, nil
}

// ==========================  END: Dataset =============================

// ==========================  START: FineTunedModel =============================

type FineTunedModel struct {
	ResourceID      string                             `json:"resource_id"`
	PlatformID      string                             `json:"platform_id"`
	Description     cohereai.FineTunedModelDescription `json:"Description"`
	Metadata        cohereai.Metadata                  `json:"metadata"`
	DescribedBy     string                             `json:"described_by"`
	ResourceType    string                             `json:"resource_type"`
	IntegrationType string                             `json:"integration_type"`
	IntegrationID   string                             `json:"integration_id"`
}

type FineTunedModelHit struct {
	ID      string         `json:"_id"`
	Score   float64        `json:"_score"`
	Index   string         `json:"_index"`
	Type    string         `json:"_type"`
	Version int64          `json:"_version,omitempty"`
	Source  FineTunedModel `json:"_source"`
	Sort    []interface{}  `json:"sort"`
}

type FineTunedModelHits struct {
	Total essdk.SearchTotal   `json:"total"`
	Hits  []FineTunedModelHit `json:"hits"`
}

type FineTunedModelSearchResponse struct {
	PitID string             `json:"pit_id"`
	Hits  FineTunedModelHits `json:"hits"`
}

type FineTunedModelPaginator struct {
	paginator *essdk.BaseESPaginator
}

func (k Client) NewFineTunedModelPaginator(filters []essdk.BoolFilter, limit *int64) (FineTunedModelPaginator, error) {
	paginator, err := essdk.NewPaginator(k.ES(), "cohereai_finetunedmodel", filters, limit)
	if err != nil {
		return FineTunedModelPaginator{}, err
	}

	p := FineTunedModelPaginator{
		paginator: paginator,
	}

	return p, nil
}

func (p FineTunedModelPaginator) HasNext() bool {
	return !p.paginator.Done()
}

func (p FineTunedModelPaginator) Close(ctx context.Context) error {
	return p.paginator.Deallocate(ctx)
}

func (p FineTunedModelPaginator) NextPage(ctx context.Context) ([]FineTunedModel, error) {
	var response FineTunedModelSearchResponse
	err := p.paginator.Search(ctx, &response)
	if err != nil {
		return nil, err
	}

	var values []FineTunedModel
	for _, hit := range response.Hits.Hits {
		values = append(values, hit.Source)
	}

	hits := int64(len(response.Hits.Hits))
	if hits > 0 {
		p.paginator.UpdateState(hits, response.Hits.Hits[hits-1].Sort, response.PitID)
	} else {
		p.paginator.UpdateState(hits, nil, "")
	}

	return values, nil
}

var listFineTunedModelFilters = map[string]string{
	"creator_id":        "Description.CreatorID",
	"default_endpoints": "Description.DefaultEndpoints",
	"id":                "Description.ID",
	"name":              "Description.Name",
	"organization_id":   "Description.OrganizationID",
	"status":            "Description.Status",
}

func ListFineTunedModel(ctx context.Context, d *plugin.QueryData, _ *plugin.HydrateData) (interface{}, error) {
	plugin.Logger(ctx).Trace("ListFineTunedModel")
	runtime.GC()

	// create service
	cfg := essdk.GetConfig(d.Connection)
	ke, err := essdk.NewClientCached(cfg, d.ConnectionCache, ctx)
	if err != nil {
		plugin.Logger(ctx).Error("ListFineTunedModel NewClientCached", "error", err)
		return nil, err
	}
	k := Client{Client: ke}

	sc, err := steampipesdk.NewSelfClientCached(ctx, d.ConnectionCache)
	if err != nil {
		plugin.Logger(ctx).Error("ListFineTunedModel NewSelfClientCached", "error", err)
		return nil, err
	}
	integrationId, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyIntegrationID)
	if err != nil {
		plugin.Logger(ctx).Error("ListFineTunedModel GetConfigTableValueOrNil for OpenGovernanceConfigKeyIntegrationID", "error", err)
		return nil, err
	}
	encodedResourceCollectionFilters, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyResourceCollectionFilters)
	if err != nil {
		plugin.Logger(ctx).Error("ListFineTunedModel GetConfigTableValueOrNil for OpenGovernanceConfigKeyResourceCollectionFilters", "error", err)
		return nil, err
	}
	clientType, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyClientType)
	if err != nil {
		plugin.Logger(ctx).Error("ListFineTunedModel GetConfigTableValueOrNil for OpenGovernanceConfigKeyClientType", "error", err)
		return nil, err
	}

	paginator, err := k.NewFineTunedModelPaginator(essdk.BuildFilter(ctx, d.QueryContext, listFineTunedModelFilters, integrationId, encodedResourceCollectionFilters, clientType), d.QueryContext.Limit)
	if err != nil {
		plugin.Logger(ctx).Error("ListFineTunedModel NewFineTunedModelPaginator", "error", err)
		return nil, err
	}

	for paginator.HasNext() {
		page, err := paginator.NextPage(ctx)
		if err != nil {
			plugin.Logger(ctx).Error("ListFineTunedModel paginator.NextPage", "error", err)
			return nil, err
		}

		for _, v := range page {
			d.StreamListItem(ctx, v)
		}
	}

	err = paginator.Close(ctx)
	if err != nil {
		return nil, err
	}

	return nil, nil
}

var getFineTunedModelFilters = map[string]string{
	"creator_id":        "Description.CreatorID",
	"default_endpoints": "Description.DefaultEndpoints",
	"id":                "Description.ID",
	"name":              "Description.Name",
	"organization_id":   "Description.OrganizationID",
	"status":            "Description.Status",
}

func GetFineTunedModel(ctx context.Context, d *plugin.QueryData, _ *plugin.HydrateData) (interface{}, error) {
	plugin.Logger(ctx).Trace("GetFineTunedModel")
	runtime.GC()
	// create service
	cfg := essdk.GetConfig(d.Connection)
	ke, err := essdk.NewClientCached(cfg, d.ConnectionCache, ctx)
	if err != nil {
		return nil, err
	}
	k := Client{Client: ke}

	sc, err := steampipesdk.NewSelfClientCached(ctx, d.ConnectionCache)
	if err != nil {
		return nil, err
	}
	integrationId, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyIntegrationID)
	if err != nil {
		return nil, err
	}
	encodedResourceCollectionFilters, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyResourceCollectionFilters)
	if err != nil {
		return nil, err
	}
	clientType, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyClientType)
	if err != nil {
		return nil, err
	}

	limit := int64(1)
	paginator, err := k.NewFineTunedModelPaginator(essdk.BuildFilter(ctx, d.QueryContext, getFineTunedModelFilters, integrationId, encodedResourceCollectionFilters, clientType), &limit)
	if err != nil {
		return nil, err
	}

	for paginator.HasNext() {
		page, err := paginator.NextPage(ctx)
		if err != nil {
			return nil, err
		}

		for _, v := range page {
			return v, nil
		}
	}

	err = paginator.Close(ctx)
	if err != nil {
		return nil, err
	}

	return nil, nil
}

// ==========================  END: FineTunedModel =============================

// ==========================  START: EmbedJob =============================

type EmbedJob struct {
	ResourceID      string                       `json:"resource_id"`
	PlatformID      string                       `json:"platform_id"`
	Description     cohereai.EmbedJobDescription `json:"Description"`
	Metadata        cohereai.Metadata            `json:"metadata"`
	DescribedBy     string                       `json:"described_by"`
	ResourceType    string                       `json:"resource_type"`
	IntegrationType string                       `json:"integration_type"`
	IntegrationID   string                       `json:"integration_id"`
}

type EmbedJobHit struct {
	ID      string        `json:"_id"`
	Score   float64       `json:"_score"`
	Index   string        `json:"_index"`
	Type    string        `json:"_type"`
	Version int64         `json:"_version,omitempty"`
	Source  EmbedJob      `json:"_source"`
	Sort    []interface{} `json:"sort"`
}

type EmbedJobHits struct {
	Total essdk.SearchTotal `json:"total"`
	Hits  []EmbedJobHit     `json:"hits"`
}

type EmbedJobSearchResponse struct {
	PitID string       `json:"pit_id"`
	Hits  EmbedJobHits `json:"hits"`
}

type EmbedJobPaginator struct {
	paginator *essdk.BaseESPaginator
}

func (k Client) NewEmbedJobPaginator(filters []essdk.BoolFilter, limit *int64) (EmbedJobPaginator, error) {
	paginator, err := essdk.NewPaginator(k.ES(), "cohereai_embedjob", filters, limit)
	if err != nil {
		return EmbedJobPaginator{}, err
	}

	p := EmbedJobPaginator{
		paginator: paginator,
	}

	return p, nil
}

func (p EmbedJobPaginator) HasNext() bool {
	return !p.paginator.Done()
}

func (p EmbedJobPaginator) Close(ctx context.Context) error {
	return p.paginator.Deallocate(ctx)
}

func (p EmbedJobPaginator) NextPage(ctx context.Context) ([]EmbedJob, error) {
	var response EmbedJobSearchResponse
	err := p.paginator.Search(ctx, &response)
	if err != nil {
		return nil, err
	}

	var values []EmbedJob
	for _, hit := range response.Hits.Hits {
		values = append(values, hit.Source)
	}

	hits := int64(len(response.Hits.Hits))
	if hits > 0 {
		p.paginator.UpdateState(hits, response.Hits.Hits[hits-1].Sort, response.PitID)
	} else {
		p.paginator.UpdateState(hits, nil, "")
	}

	return values, nil
}

var listEmbedJobFilters = map[string]string{
	"input_dataset_id":  "Description.input_dataset_id",
	"job_id":            "Description.job_id",
	"model":             "Description.model",
	"name":              "Description.name",
	"output_dataset_id": "Description.output_dataset_id",
	"status":            "Description.status",
	"truncate":          "Description.truncate",
}

func ListEmbedJob(ctx context.Context, d *plugin.QueryData, _ *plugin.HydrateData) (interface{}, error) {
	plugin.Logger(ctx).Trace("ListEmbedJob")
	runtime.GC()

	// create service
	cfg := essdk.GetConfig(d.Connection)
	ke, err := essdk.NewClientCached(cfg, d.ConnectionCache, ctx)
	if err != nil {
		plugin.Logger(ctx).Error("ListEmbedJob NewClientCached", "error", err)
		return nil, err
	}
	k := Client{Client: ke}

	sc, err := steampipesdk.NewSelfClientCached(ctx, d.ConnectionCache)
	if err != nil {
		plugin.Logger(ctx).Error("ListEmbedJob NewSelfClientCached", "error", err)
		return nil, err
	}
	integrationId, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyIntegrationID)
	if err != nil {
		plugin.Logger(ctx).Error("ListEmbedJob GetConfigTableValueOrNil for OpenGovernanceConfigKeyIntegrationID", "error", err)
		return nil, err
	}
	encodedResourceCollectionFilters, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyResourceCollectionFilters)
	if err != nil {
		plugin.Logger(ctx).Error("ListEmbedJob GetConfigTableValueOrNil for OpenGovernanceConfigKeyResourceCollectionFilters", "error", err)
		return nil, err
	}
	clientType, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyClientType)
	if err != nil {
		plugin.Logger(ctx).Error("ListEmbedJob GetConfigTableValueOrNil for OpenGovernanceConfigKeyClientType", "error", err)
		return nil, err
	}

	paginator, err := k.NewEmbedJobPaginator(essdk.BuildFilter(ctx, d.QueryContext, listEmbedJobFilters, integrationId, encodedResourceCollectionFilters, clientType), d.QueryContext.Limit)
	if err != nil {
		plugin.Logger(ctx).Error("ListEmbedJob NewEmbedJobPaginator", "error", err)
		return nil, err
	}

	for paginator.HasNext() {
		page, err := paginator.NextPage(ctx)
		if err != nil {
			plugin.Logger(ctx).Error("ListEmbedJob paginator.NextPage", "error", err)
			return nil, err
		}

		for _, v := range page {
			d.StreamListItem(ctx, v)
		}
	}

	err = paginator.Close(ctx)
	if err != nil {
		return nil, err
	}

	return nil, nil
}

var getEmbedJobFilters = map[string]string{
	"input_dataset_id":  "Description.input_dataset_id",
	"job_id":            "Description.job_id",
	"model":             "Description.model",
	"name":              "Description.name",
	"output_dataset_id": "Description.output_dataset_id",
	"status":            "Description.status",
	"truncate":          "Description.truncate",
}

func GetEmbedJob(ctx context.Context, d *plugin.QueryData, _ *plugin.HydrateData) (interface{}, error) {
	plugin.Logger(ctx).Trace("GetEmbedJob")
	runtime.GC()
	// create service
	cfg := essdk.GetConfig(d.Connection)
	ke, err := essdk.NewClientCached(cfg, d.ConnectionCache, ctx)
	if err != nil {
		return nil, err
	}
	k := Client{Client: ke}

	sc, err := steampipesdk.NewSelfClientCached(ctx, d.ConnectionCache)
	if err != nil {
		return nil, err
	}
	integrationId, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyIntegrationID)
	if err != nil {
		return nil, err
	}
	encodedResourceCollectionFilters, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyResourceCollectionFilters)
	if err != nil {
		return nil, err
	}
	clientType, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyClientType)
	if err != nil {
		return nil, err
	}

	limit := int64(1)
	paginator, err := k.NewEmbedJobPaginator(essdk.BuildFilter(ctx, d.QueryContext, getEmbedJobFilters, integrationId, encodedResourceCollectionFilters, clientType), &limit)
	if err != nil {
		return nil, err
	}

	for paginator.HasNext() {
		page, err := paginator.NextPage(ctx)
		if err != nil {
			return nil, err
		}

		for _, v := range page {
			return v, nil
		}
	}

	err = paginator.Close(ctx)
	if err != nil {
		return nil, err
	}

	return nil, nil
}

// ==========================  END: EmbedJob =============================
